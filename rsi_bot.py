import asyncio
import logging
from datetime import datetime
from typing import List, Dict
from aiogram import Bot
from connectors.hybrid_connector import HybridConnector
from database import RSIDatabase
from rsi_analyzer import RSIAnalyzer
from web_interface import WebInterface
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RSIBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSI –±–æ—Ç–∞"""
        self.config = config
        self.is_running = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        config.validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.database = RSIDatabase(config.DATABASE_URL)
        self.hybrid_connector = HybridConnector(config)
        self.rsi_analyzer = RSIAnalyzer(config, self.database)
        self.telegram_bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.web_interface = WebInterface(config, self.database, self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.current_symbols = config.DEFAULT_SYMBOLS
        self.current_timeframe = config.DEFAULT_TIMEFRAME
        self.current_oversold = config.RSI_OVERSOLD
        self.current_overbought = config.RSI_OVERBOUGHT
        
        logger.info("RSI –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        

            
    async def update_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            user_settings = self.database.get_user_settings()
            if user_settings:
                self.current_symbols = user_settings['symbols']
                self.current_timeframe = user_settings['timeframe']
                self.current_oversold = user_settings['rsi_oversold']
                self.current_overbought = user_settings['rsi_overbought']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
                self.rsi_analyzer.config.RSI_OVERSOLD = self.current_oversold
                self.rsi_analyzer.config.RSI_OVERBOUGHT = self.current_overbought
                
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(self.current_symbols)} —Å–∏–º–≤–æ–ª–æ–≤, "
                           f"—Ç–∞–π–º—Ñ—Ä–µ–π–º {self.current_timeframe}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
            
    async def send_telegram_notification(self, signal: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.rsi_analyzer.get_signal_description(signal)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ TradingView
            tv_url = self.rsi_analyzer.get_tradingview_url(
                signal['symbol'], 
                signal['timeframe']
            )
            message += f"\n\nüìä [–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ TradingView]({tv_url})"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            approved_users = self.database.get_approved_telegram_users()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            admin_id = int(self.config.TELEGRAM_CHAT_ID)
            admin_in_list = any(user['user_id'] == admin_id for user in approved_users)
            
            if not admin_in_list:
                approved_users.append({
                    'user_id': admin_id,
                    'username': 'admin',
                    'first_name': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'last_name': ''
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            sent_count = 0
            for user in approved_users:
                try:
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ user_id = chat_id
                    await self.telegram_bot.send_message(
                        chat_id=user['user_id'],
                        text=message,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    sent_count += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                    
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(approved_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {signal['symbol']} {signal['signal_type']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            
    async def analyze_symbol(self, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = await self.hybrid_connector.get_historical_data(
                symbol=symbol,
                timeframe=self.current_timeframe,
                limit=50
            )
            
            if df is None or len(df) < 2:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º RSI —Å–∏–≥–Ω–∞–ª—ã
            signals = self.rsi_analyzer.analyze_rsi_signals(
                symbol=symbol,
                timeframe=self.current_timeframe,
                df=df
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            for signal in signals:
                if self.rsi_analyzer.should_notify(signal):
                    await self.send_telegram_notification(signal)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {str(e)}")
            

            
    async def run_analysis_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(self.current_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            for symbol in self.current_symbols:
                await self.analyze_symbol(symbol)
                await asyncio.sleep(1.5)  # –ü–∞—É–∑–∞ –¥–ª—è rate limiting
                
            logger.info("–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ RSI –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.update_settings()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            self.web_server_task = asyncio.create_task(self.web_interface.start_server())
            logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.config.WEB_HOST}:{self.config.WEB_PORT}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            while self.is_running:
                try:
                    await self.run_analysis_cycle()
                    await asyncio.sleep(self.config.CHECK_INTERVAL)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                    await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            await self.stop()
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.is_running = False
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RSI –±–æ—Ç–∞")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            if hasattr(self, 'web_server_task') and self.web_server_task:
                self.web_server_task.cancel()
                try:
                    await self.web_server_task
                except asyncio.CancelledError:
                    pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if hasattr(self.telegram_bot, 'session') and self.telegram_bot.session:
                await self.telegram_bot.session.close()
                
            if self.hybrid_connector:
                self.hybrid_connector.close()
                
            logger.info("‚úÖ RSI –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ RSI –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = RSIBot()
        await bot.start()
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {str(e)}")
    finally:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main()) 