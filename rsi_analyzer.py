import logging
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from database import RSIDatabase

logger = logging.getLogger(__name__)

class RSIAnalyzer:
    def __init__(self, config, database: RSIDatabase):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.config = config
        self.database = database
        self.previous_rsi_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π RSI
        
    def analyze_rsi_signals(self, symbol: str, timeframe: str, df: pd.DataFrame) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ RSI —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            if df is None or len(df) < 2:
                return []
                
            signals = []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è RSI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            current_rsi = df['rsi'].iloc[-1]
            previous_rsi = df['rsi'].iloc[-2]
            current_price = df['close'].iloc[-1]
            current_time = df.index[-1]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_key = f"{symbol}_{timeframe}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü RSI
            signal_type = None
            
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            if (previous_rsi <= self.config.RSI_OVERSOLD and 
                current_rsi > self.config.RSI_OVERSOLD):
                signal_type = "oversold_exit"
                
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (70) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            elif (previous_rsi >= self.config.RSI_OVERBOUGHT and 
                  current_rsi < self.config.RSI_OVERBOUGHT):
                signal_type = "overbought_exit"
                
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            elif (previous_rsi > self.config.RSI_OVERSOLD and 
                  current_rsi <= self.config.RSI_OVERSOLD):
                signal_type = "oversold_enter"
                
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (70) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            elif (previous_rsi < self.config.RSI_OVERBOUGHT and 
                  current_rsi >= self.config.RSI_OVERBOUGHT):
                signal_type = "overbought_enter"
            
            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            if signal_type:
                signal = {
                    'symbol': symbol,
                    'timeframe': timeframe,
                    'signal_type': signal_type,
                    'rsi_value': current_rsi,
                    'price': current_price,
                    'timestamp': current_time,
                    'previous_rsi': previous_rsi
                }
                
                signals.append(signal)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self.database.add_signal(
                    symbol=symbol,
                    timeframe=timeframe,
                    signal_type=signal_type,
                    rsi_value=current_rsi,
                    price=current_price,
                    timestamp=current_time
                )
                
                logger.info(f"RSI —Å–∏–≥–Ω–∞–ª: {symbol} {timeframe} {signal_type} "
                           f"RSI: {previous_rsi:.2f} -> {current_rsi:.2f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.previous_rsi_states[state_key] = {
                'rsi': current_rsi,
                'timestamp': current_time
            }
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ RSI –¥–ª—è {symbol}: {str(e)}")
            return []
            
    def analyze_historical_rsi_signals(self, symbol: str, timeframe: str, df: pd.DataFrame, days_back: int = 2) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö RSI —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            if df is None or len(df) < 2:
                return []
                
            signals = []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            end_time = datetime.now()
            start_time = end_time - timedelta(days=days_back)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            historical_df = df[df.index >= start_time]
            
            if len(historical_df) < 2:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return []
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∑–∞ {days_back} –¥–Ω–µ–π: {len(historical_df)} —Å–≤–µ—á–µ–π")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–≤–µ—á–∞–º –∏ –∏—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è RSI
            for i in range(1, len(historical_df)):
                current_row = historical_df.iloc[i]
                previous_row = historical_df.iloc[i-1]
                
                current_rsi = current_row['rsi']
                previous_rsi = previous_row['rsi']
                current_price = current_row['close']
                current_time = current_row.name
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
                if pd.isna(current_rsi) or pd.isna(previous_rsi):
                    continue
                
                signal_type = None
                
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                if (previous_rsi <= self.config.RSI_OVERSOLD and 
                    current_rsi > self.config.RSI_OVERSOLD):
                    signal_type = "oversold_exit"
                    
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (70) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                elif (previous_rsi >= self.config.RSI_OVERBOUGHT and 
                      current_rsi < self.config.RSI_OVERBOUGHT):
                    signal_type = "overbought_exit"
                    
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30) —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                elif (previous_rsi > self.config.RSI_OVERSOLD and 
                      current_rsi <= self.config.RSI_OVERSOLD):
                    signal_type = "oversold_enter"
                    
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (70) —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
                elif (previous_rsi < self.config.RSI_OVERBOUGHT and 
                      current_rsi >= self.config.RSI_OVERBOUGHT):
                    signal_type = "overbought_enter"
                
                # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
                if signal_type:
                    signal = {
                        'symbol': symbol,
                        'timeframe': timeframe,
                        'signal_type': signal_type,
                        'rsi_value': current_rsi,
                        'price': current_price,
                        'timestamp': current_time,
                        'previous_rsi': previous_rsi,
                        'historical': True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π
                    }
                    
                    signals.append(signal)
                    
                    logger.debug(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π RSI —Å–∏–≥–Ω–∞–ª: {symbol} {timeframe} {signal_type} "
                               f"RSI: {previous_rsi:.2f} -> {current_rsi:.2f} –≤ {current_time}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(signals)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –∑–∞ {days_back} –¥–Ω–µ–π")
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö RSI –¥–ª—è {symbol}: {str(e)}")
            return []
            
    def get_signal_description(self, signal: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            signal_descriptions = {
                'oversold_enter': 'üî¥ *–ü–ï–†–ï–ü–†–û–î–ê–ù!* RSI —É—à–µ–ª –Ω–∏–∂–µ 30',
                'overbought_enter': 'üü° *–ü–ï–†–ï–ö–£–ü–õ–ï–ù!* RSI –ø–æ–¥–Ω—è–ª—Å—è –≤—ã—à–µ 70'
            }
            
            signal_type = signal['signal_type']
            description = signal_descriptions.get(signal_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª')
            
            # –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–æ–≤ –≤ –∑–æ–Ω—ã - –≤—ã—Ö–æ–¥—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            if signal_type not in ['oversold_enter', 'overbought_enter']:
                return ""
            
            historical_mark = " (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π)" if signal.get('historical', False) else ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞
            symbol_emoji = {
                'BTCUSDT': '‚Çø', 'ETHUSDT': 'Œû', 'DOGEUSDT': 'üêï',
                'ADAUSDT': 'üåü', 'SOLUSDT': '‚òÄÔ∏è', 'XRPUSDT': 'üíß',
                'DOTUSDT': 'üî¥', 'AVAXUSDT': 'üèîÔ∏è', 'MATICUSDT': 'üî∑'
            }.get(signal['symbol'], 'üí∞')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            try:
                if hasattr(signal['timestamp'], 'strftime'):
                    time_str = signal['timestamp'].strftime('%H:%M:%S')
                else:
                    time_str = str(signal['timestamp'])[:19]
            except:
                time_str = str(signal['timestamp'])
            
            return (f"{description}{historical_mark}\n\n"
                   f"{symbol_emoji} *{signal['symbol'].replace('USDT', '')}*\n"
                   f"üìà RSI: *{signal['rsi_value']:.2f}*\n"
                   f"üí∞ –¶–µ–Ω–∞: *${signal['price']:.4f}*\n"
                   f"‚è∞ {time_str} | {signal['timeframe']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"
            
    def get_tradingview_url(self, symbol: str, timeframe: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è TradingView"""
        try:
            # –£–±–∏—Ä–∞–µ–º USDT –∏–∑ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è TradingView
            tv_symbol = symbol.replace('USDT', 'USD')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç TradingView
            tv_timeframe_map = {
                '1m': '1', '3m': '3', '5m': '5', '15m': '15', '30m': '30',
                '1h': '60', '2h': '120', '4h': '240', '6h': '360', 
                '8h': '480', '12h': '720', '1d': 'D'
            }
            
            tv_timeframe = tv_timeframe_map.get(timeframe, '5')
            
            url = (f"https://www.tradingview.com/chart/?symbol=BINANCE:{tv_symbol}"
                   f"&interval={tv_timeframe}")
            
            return url
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TradingView URL: {str(e)}")
            return "https://www.tradingview.com"
            
    def should_notify(self, signal: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.database.get_user_settings()
            
            if not user_settings or not user_settings.get('notifications_enabled', True):
                return False
                
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ –≤—Ö–æ–¥–∞—Ö –≤ –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            notify_signals = ['oversold_enter', 'overbought_enter']
            
            is_notify = signal['signal_type'] in notify_signals
            
            if is_notify:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: {signal['symbol']} {signal['signal_type']}")
            
            return is_notify
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False 